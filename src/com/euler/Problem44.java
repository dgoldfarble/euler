package com.euler;

import java.util.HashSet;

/**
 * Created by dgoldfarb on 7/16/15.

 QUESTION
 Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

 It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

 Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
 difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?

 ANSWER OPTION ONE
   - Generate a small list of pentagonal numbers (say, 10,000)
   - iterate through all pairs to find a pair satisfying the condition
   - use that pair's difference as an upper bound

 ANSWER OPTION TWO
   - given a list of the first n - 1 pentagonals
   - find the difference P(n) - P(n - 1), and use as a lower bound for iterating through the pairs
   - find the sum P(n) + P(n + 1) and use
   - iterate through pairs, seeing if difference between
 */
public class Problem44 {

    public static void main(String[] args) {
        Problem44 p45 = new Problem44();
        p45.run();
    }

    private void run() {
        int n = 2;
        boolean found = false;
        int baseline = Integer.MAX_VALUE;
        while (!found) {
            int pn = p(n);

            for (int i = n - 1; i > 0; i--) {
                int pi = p(i);
                if (isPentagonal(pn - pi) && isPentagonal(pn + pi)) {
                    if (pn - pi < baseline) {
                        baseline = pn - pi;
                        System.out.println(baseline);
                    }
                    found = true;
                    break;
                }
            }
            n++;
        }
    }

    private int p(int n) {
        return (n * (3 * n - 1)) / 2;
    }

    private boolean isPentagonal(int p) {
        // p = 1 / 24 * (36n^2 - 12n + 1 - 1) = 1 / 24 * ((6n - 1)^2 - 1)
        double penistest = (Math.sqrt(24 * p + 1) + 1.0) / 6.0;
        return penistest == (int) penistest;
    }
}
